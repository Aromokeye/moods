{"ast":null,"code":"import { CHANGE_SEARCHFIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constantsForRedux.js';\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCHFIELD,\n  payload: text\n});\nexport const getPeople = dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/home/aniyi/Documents/hackernews/src/action.js"],"names":["CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchField","text","type","payload","getPeople","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SAAQA,kBAAR,EACQC,sBADR,EAEQC,sBAFR,EAGQC,qBAHR,QAIO,wBAJP;AAMA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAS;AACnCC,EAAAA,IAAI,EAAEN,kBAD6B;AAEnCO,EAAAA,OAAO,EAAEF;AAF0B,CAAT,CAAvB;AAKP,OAAO,MAAMG,SAAS,GAAIC,QAAD,IAAa;AAClCA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADhB,EAECF,IAFD,CAEMG,IAAI,IAAIL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEJ,sBAAP;AAA+BK,IAAAA,OAAO,EAAEO;AAAxC,GAAD,CAFtB,EAGCC,KAHD,CAGOC,KAAK,IAAIP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAACH,qBAAN;AAA6BI,IAAAA,OAAO,EAAES;AAAtC,GAAD,CAHxB;AAIH,CANM","sourcesContent":["import {CHANGE_SEARCHFIELD,\r\n        REQUEST_ROBOTS_PENDING,\r\n        REQUEST_ROBOTS_SUCCESS,\r\n        REQUEST_ROBOTS_FAILED\r\n} from './constantsForRedux.js'\r\n\r\nexport const setSearchField = (text)=>({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\nexport const getPeople = (dispatch) =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\r\n}"]},"metadata":{},"sourceType":"module"}